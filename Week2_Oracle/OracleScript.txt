Note:
1. testinstance
2. Enterprise edition
2. EMPDB

create table dept(
  deptno number(2,0),
  dname  varchar2(14) unique,
  loc    varchar2(13) not null,
  constraint pk_dept primary key (deptno)
);
 
create table emp(
  empno    number(4,0),
  ename    varchar2(10),
  job      varchar2(9),
  mgr      number(4,0),
  hiredate date,
  sal      number(7,2),
  comm     number(7,2),
  deptno   number(2,0),
  constraint pk_emp primary key (empno),
  constraint fk_deptno foreign key (deptno) references dept (deptno)
);

ALTER TABLE dept
ADD CONSTRAINT check_dept_no
CHECK (deptno between 10 and 100);

describe dept;

ALTER TABLE table_name
DISABLE CONSTRAINT constraint_name;

insert into dept
values(10, 'ACCOUNTING', 'NEW YORK');
insert into dept
values(20, 'RESEARCH', 'DALLAS');
insert into dept
values(30, 'SALES', 'CHICAGO');
insert into dept
values(40, 'OPERATIONS', 'BOSTON');
 
insert into emp
values(
 7839, 'KING', 'PRESIDENT', null,
 to_date('17-11-1981','dd-mm-yyyy'),
 5000, null, 10
);
insert into emp
values(
 7698, 'BLAKE', 'MANAGER', 7839,
 to_date('1-5-1981','dd-mm-yyyy'),
 2850, null, 30
);
insert into emp
values(
 7782, 'CLARK', 'MANAGER', 7839,
 to_date('9-6-1981','dd-mm-yyyy'),
 2450, null, 10
);
insert into emp
values(
 7566, 'JONES', 'MANAGER', 7839,
 to_date('2-4-1981','dd-mm-yyyy'),
 2975, null, 20
);
insert into emp
values(
 7788, 'SCOTT', 'ANALYST', 7566,
 to_date('9-12-1981','dd-mm-yyyy'),
 3000, null, 20
);
insert into emp
values(
 7902, 'FORD', 'ANALYST', 7566,
 to_date('3-12-1981','dd-mm-yyyy'),
 3000, null, 20
);
insert into emp
values(
 7369, 'SMITH', 'CLERK', 7902,
 to_date('17-12-1980','dd-mm-yyyy'),
 800, null, 20
);
insert into emp
values(
 7499, 'ALLEN', 'SALESMAN', 7698,
 to_date('20-2-1981','dd-mm-yyyy'),
 1600, 300, 30
);
insert into emp
values(
 7521, 'WARD', 'SALESMAN', 7698,
 to_date('22-2-1981','dd-mm-yyyy'),
 1250, 500, 30
);
insert into emp
values(
 7654, 'MARTIN', 'SALESMAN', 7698,
 to_date('28-9-1981','dd-mm-yyyy'),
 1250, 1400, 30
);
insert into emp
values(
 7844, 'TURNER', 'SALESMAN', 7698,
 to_date('8-9-1981','dd-mm-yyyy'),
 1500, 0, 30
);
insert into emp
values(
 7876, 'ADAMS', 'CLERK', 7788,
 to_date('12-1-1983', 'dd-mm-yyyy'),
 1100, null, 20
);
insert into emp
values(
 7900, 'JAMES', 'CLERK', 7698,
 to_date('3-12-1981','dd-mm-yyyy'),
 950, null, 30
);
insert into emp
values(
 7934, 'MILLER', 'CLERK', 7782,
 to_date('23-1-1982','dd-mm-yyyy'),
 1300, null, 10
);
 
/*
insert into salgrade
values (1, 700, 1200);
insert into salgrade
values (2, 1201, 1400);
insert into salgrade
values (3, 1401, 2000);
insert into salgrade
values (4, 2001, 3000);
insert into salgrade
values (5, 3001, 9999);
*/
 
COMMIT;

END;

-----------------------Select---------------Retrieve Data-----------------------
SELECT * FROM EMP;


--SELECT <column>
--FROM <table>


SELECT JOB
FROM EMP;


SELECT JOB, ENAME
FROM EMP;


SELECT *
FROM EMP;


SELECT JOB, ENAME
FROM EMP;


SELECT JOB from emp;


SELECT DNAME, LOC from dept;


SELECT distinct job from emp;


---------------------------------SELECT *
FROM EMP
WHERE job = 'MANAGER'


SELECT *
FROM EMP
WHERE JOB = 'SALESMAN'
AND SAL = 1600
AND COMM = 300
AND DEPTNO = 30

--------------------Operators---------------------
SELECT * FROM EMP
WHERE JOB != 'SALESMAN'


SELECT * FROM EMP
WHERE JOB = 'SALESMAN'
AND SAL = 1500


SELECT * FROM EMP
WHERE JOB != 'SALESMAN'
AND SAL < 2500


SELECT * FROM EMP
WHERE JOB != 'SALESMAN'
AND SAL < 3000


SELECT * FROM EMP
WHERE JOB != 'SALESMAN'
AND SAL <= 3000


SELECT * FROM EMP
WHERE JOB != 'SALESMAN'
AND SAL > 3000


-- Write a query that returns those employees who have a commission greater than their salary 
SELECT * FROM EMP
WHERE COMM > SAL


-- Get all employees that are not managers and have a salary greater than 2500 and also work in department no# 20 
SELECT * FROM EMP
WHERE JOB != 'MANAGER'
AND SAL > 2500
AND DEPTNO = 20

------------------Combining Where And and Or----------------
SELECT * FROM EMP
WHERE JOB = 'CLERK'
OR JOB = 'SALESMAN'


-- Get the names of those employees that are not managers nor salesmen and have a salary greater than or equal to 2000 
SELECT ENAME FROM EMP
WHERE JOB != 'MANAGER'
AND JOB != 'SALESMAN'
AND SAL >= 2000

-----------------------------Between In and Null -----------------------
SELECT ename, hiredate FROM EMP
WHERE DEPTNO  = 20 
OR DEPTNO = 30


SELECT ename, hiredate FROM EMP
WHERE DEPTNO IN (20,30)


SELECT ename, hiredate FROM EMP
WHERE ENAME IN ('FORD', 'SMITH', 'ALLEN', 'WARD', 'MARTIN')


SELECT ename, hiredate FROM EMP
WHERE ENAME NOT IN ('FORD', 'SMITH', 'ALLEN', 'WARD', 'MARTIN')


SELECT * from emp
where hiredate between '05/01/1981' and '12/09/1982'


SELECT * from emp
where SAL between 1000 AND 2000


SELECT * from emp
where SAL NOT BETWEEN 950 AND 1600

SELECT * FROM EMP
WHERE COMM IS NOT NULL;


SELECT * FROM EMP WHERE MGR IS NULL

---------------------------Filtering Condition and Operator Precedence--------------
-- Write a query that returns those employees that don't make any commision and have a salary greater than 1100
-- but less than 5000. Exclude those employees that have a salary equal to 3000
SELECT * FROM EMP WHERE ( COMM IS NULL
AND SAL > 1100 AND SAL < 5000
AND SAL <> 3000 )
OR COMM = 0


SELECT * FROM EMP
WHERE ( COMM IS NULL or COMM = 0)
AND SAL > 1100 AND SAL < 5000
AND SAL <> 3000


-- Returns those employees that are salesman and that make either 300 dollars in commission
--or greater than 1100 follars in collission
SELECT * FROM EMP
WHERE JOB = 'SALESMAN'
AND (COMM = 300 OR COMM > 1100)


SELECT * FROM EMP 
WHERE JOB LIKE 'S%'


SELECT * FROM EMP 
WHERE JOB LIKE '%GER'

--------------------------Ordering , Concatinating , Aliasing ----------------

SELECT ENAME "EMPLOYEE NAME", SAL SALARY, COMM COMMISSION
FROM EMP;


SELECT 'hello my name is ' || ename as "concatenated value"
FROM EMP
WHERE job = 'MANAGER'

-- Create Query that looks like:
-- King makes $5000 per month 
-- Blake makes $2850 per month 
-- Clark makes $2450 per month 
SELECT ename || ' makes $' || sal || ' per month' as "employee income"
FROM EMP


-- ORDER BY 
SELECT *
FROM emp
ORDER BY ENAME


SELECT *
FROM emp
ORDER BY SAL


-- ORDER BY descending order
SELECT *
FROM emp
ORDER BY SAL DESC


-- ORDER BY ascending order
SELECT *
FROM emp
ORDER BY SAL ASC


SELECT DEPTNO, SAL, ENAME
FROM EMP
ORDER BY DEPTNO, SAL


SELECT *
FROM EMP
ORDER BY DEPTNO, SAL

-------------------Row Functions-------------
SELECT 'my name is ' || ename
FROM EMP


SELECT concat('my name is ', ename)
FROM EMP


SELECT upper('hello')
from emp

SELECT 'hello'
from emp
where deptno = 20


select upper('hello')
from DUAL


select lower('hello')
from DUAL 


SELECT 'pizza' as FOOD, 'fanta' as drink, concat('hello', ' John') from dual


SELECT 'pizza' as FOOD, 'fanta' as drink, concat('hello', ' John') as "This is a func" from dual


SELECT concat(lower(ename), ' is the name') from emp


SELECT concat(lower(ename), upper(' is the name')) from emp
where deptno = 20


SELECT concat(concat(lower(ename), upper(' is the name')), concat(' and their job is: ', job)) as "function call" from emp
where deptno = 20


----------------------------Functions-------------SELECT lower(ename) from emp;


SELECT *
FROM emp
WHERE JOB = lower('MANAGER')


SELECT *
FROM emp
WHERE JOB = upper('MANAGER')


SELECT *
FROM emp
WHERE JOB = upper('manager')


SELECT initcap('hello my name is Imtiaz') as sentence
from dual


SELECT length('hello my name is Imtiaz') as length
from dual


SELECT length(ename) as length
from emp


SELECT ename, length(ename) as length
from emp


SELECT ename, length(ename) as length
from emp
where length(ename) = 6


select substr('hello', 2, 2)
from dual


select 'hello', substr('hello', 2, 2)
from dual


select 'hello', substr('hello', 2)
from dual


select 'Hello my name is', substr('Hello my name is', 10)
from dual


select 'Hello my name is', substr('Hello my name is', 10, 5)
from dual


select 'Hello my name is', length(substr('Hello my name is', 10, 5))
from dual


select LPAD('hello', 10, '&')
from dual


select LPAD('hello', 100, '&')
from dual


select RPAD('hello', 100, '&')
from dual


select LTRIM('hello', 'h')
from dual


select RTRIM('hhhhhellohhhhh', 'h')
from dual


----------------------------Numeric Date DataType-------------
-- round 

SELECT round(107.088, 2) from dual


SELECT round(107.088, 3) from dual


SELECT round(107.0887, 3) from dual


SELECT round(107.9) from dual

-- trunc 

SELECT trunc(107.938439849) from dual


SELECT trunc(107.938439849, 3) from dual


SELECT trunc(107.938439849, 5) from dual

-- sysdate 

SELECT sysdate from dual

-- systimestamp 

SELECT systimestamp from dual

-- add_months 

SELECT add_months('11/17/2012', 3)
from dual

SELECT add_months(to_date('11/17/2012','mm/dd/yyyy'), 3)
    from dual


SELECT add_months('11/17/2012', -3)
from dual


SELECT add_months(sysdate, -3)
from dual


SELECT add_months(sysdate, +100)
from dual

-- months_between 

SELECT months_between('12/15/2012', '12/4/2013')
from dual


SELECT months_between('12/4/2013', '12/15/2012')
from dual


SELECT months_between('12/4/2013', '12/4/2012')
from dual


SELECT trunc(systimestamp) from dual


SELECT trunc(systimestamp, 'YEAR') from dual


SELECT trunc(systimestamp, 'MONTH') from dual


SELECT hiredate, trunc(hiredate, 'MONTH') from emp


SELECT ename, hiredate, trunc(hiredate, 'MONTH') from emp


SELECT ename, hiredate, trunc(hiredate, 'MONTH')
from emp
where trunc(hiredate, 'YEAR') = '01/01/1982'

------------------------------Null NullIf------------
select ename, job, sal, comm
from emp
where empno in (7839, 7698, 7566, 7654)


select ename, job, sal, NVL(comm, 0)
from emp
where empno in (7839, 7698, 7566, 7654)

-- Solution to Assginment at 4:00 

select ename, job, sal, NVL(to_char(comm), 'No Data Found')
from emp
where empno in (7839, 7698, 7566, 7654)


select ename, length(ename) from emp


select ename, length(ename), NULLIF(length(ename), 5) from emp


select ename, length(ename), nvl(NULLIF(length(ename), 5), 'length is 5') from emp /* Gives "invalid number" error */


select ename, length(ename), nvl(NULLIF(to_char(length(ename)), to_char(5)), 'length is 5') from emp 


select ename, length(ename), nvl(NULLIF(to_char(length(ename)), to_char(5)), 'length is 5') as result, sal from emp 
where sal > 2000
--------------------Aggregate Function Function -------------------
select max(sal) from emp


select max(sal) as max_sal from emp


select min(sal) as min_sal from emp


select sum(sal) as sum_sal from emp


SELECT * from emp
where lower(job) like '%manager%'


SELECT max(sal) from emp
where lower(job) like '%manager%'


SELECT max(sal) from emp
where job = 'MANAGER'


SELECT avg(sal) as avg_sal from emp


SELECT count(ename) as count from emp


SELECT count(sal) as count from emp


SELECT count(*) as count from emp


SELECT count(comm) as count from emp


SELECT sum(sal) / count(*) as computed_avg, avg(sal) as native_avg from emp


SELECT sum(sal) + avg(sal) as computed from emp 


SELECT sum(sal) as sum, avg(sal) as avg, max(sal) as max, min(sal) as min, count(*)
from emp


SELECT avg(sal)
from emp
where job = 'SALESMAN'


SELECT avg(sal)
from emp
where job = 'CLERK'


SELECT avg(sal)
from emp
where job = 'MANAGER'
----------------------SELECT avg(sal), job
from emp
GROUP BY job


SELECT job
from emp
GROUP BY job


SELECT count(*), job
from emp
GROUP BY job


SELECT min(sal), job
from emp
GROUP BY job


SELECT distict job from emp


SELECT count(*), job
from emp
GROUP BY job
HAVING count(*) = 2


SELECT job
from emp
GROUP BY job
HAVING count(*) = 2


--1) SELECT job
--2) FROM emp
--3) WHERE
--4) GROUP BY JOB
--5) HAVING count(*) = 2
--6) ORDER BY


SELECT deptno
from emp
GROUP BY deptno
HAVING count(*) > 3


SELECT deptno, count(*)
from emp
GROUP BY deptno


SELECT deptno, count(*)
from emp
GROUP BY deptno
HAVING count(*) > 3


SELECT * from emp


Select job, count(*)
from emp
group by job


Select job, count(*)
from emp
group by job, deptno


SELECT job, deptno
from emp


SELECT job, deptno
from emp
group by job, deptno


SELECT job, deptno, count(*)
from emp
group by job, deptno

-------------------------------Case ---------
SELECT ename, job, (CASE job
 WHEN 'PRESIDENT' THEN 'big shot'
 WHEN 'MANAGER' THEN 'decides the pay'
 WHEN 'ANALYST' THEN 'good at pay'
 WHEN 'CLERK' THEN 'hard working'
 ELSE 'no comment'
 END) as 'COMMENT'
FROM emp;

-- Solution to Assignment

SELECT ename, sal, CASE
 WHEN sal >= 3000 THEN 'big shot'
 WHEN sal < 3000 THEN 'need more money'
 END as salary_comment
FROM emp;

-------------------------Inner JOIN------------
SELECT *
from emp, dept
WHERE emp.deptno = dept.deptno


SELECT *
from emp INNER JOIN dept
ON emp.deptno = dept.deptno


------------------------Self Join--------------

Select e1.empno, e2.ename from emp e1,emp e2 where e1.empno=e2.mgr;


SELECT *
from emp RIGHT JOIN dept
ON emp.deptno = dept.deptno


SELECT *
from emp LEFT JOIN dept
ON emp.deptno = dept.deptno


SELECT *
from dept LEFT JOIN emp
ON emp.deptno = dept.deptno


SELECT *
from dept RIGHT JOIN emp
ON emp.deptno = dept.deptno


SELECT *
from emp RIGHT OUTER JOIN dept
ON emp.deptno = dept.deptno


SELECT *
from emp LEFT OUTER JOIN dept
ON emp.deptno = dept.deptno


SELECT *
from emp, dept
WHERE emp.deptno(+) = dept.deptno --RIGHT OUTER JOIN


SELECT *
from emp, dept
WHERE emp.deptno = dept.deptno(+) --LEFT OUTER JOIN


SELECT *
from emp FULL OUTER JOIN dept
ON emp.deptno = dept.deptno


SELECT *
from (select * from emp) emp FULL OUTER JOIN dept
ON emp.deptno = dept.deptno


SELECT *
from (select * from emp) e FULL OUTER JOIN dept
ON e.deptno = dept.deptno


SELECT *
from (select * from emp) e FULL OUTER JOIN (select * from dept) d
ON e.deptno = d.deptno


SELECT *
from (select * from emp) e, (select * from dept) d
WHERE e.deptno = d.deptno


SELECT *
from (select * from emp where job = 'SALESMAN') e FULL OUTER JOIN (select * from dept) d
ON e.deptno = d.deptno
---------------------------View---------------------------
 create or replace view EmpView as 
select empno,ename, sal 
from emp 
where sal > 950

Select * from EMPView;

create view EmpDeptView as 
select empno,ename,sal,dept.deptno,dname
from emp,dept 
where emp.deptno=dept.deptno

drop view EmpView;

------------------Index
CREATE INDEX emp_ename ON emp(ename)    -- BTree Index default
      STORAGE (INITIAL 20K 
      NEXT 20k)

CREATE UNIQUE INDEX dept_unique_index ON dept (dname) -- Unique INDEX


Create  bitmap index idx_job1 on emp(job);		---- BitMap Index
explain plan for select * from dept;				
select * from table (dbms_xplan.display)


explain plan for select * from dept;
select * from table (dbms_xplan.display)



--------------------------DROP,TRUNCATE----------------
SELECT * FROM DEPT


SELECT * FROM DEPT WHERE deptno = 40


DELETE FROM DEPT WHERE deptno = 40


DELETE FROM DEPT WHERE dname IN ('ACCOUNTING') 


ALTER TABLE emp
DROP CONSTRAINT EMP_DEPT_FK -- Use the FK that you see


SELECT * FROM emp


DROP TABLE dept


TRUNCATE TABLE emp


SELECT * FROM emp -- no date found


SELECT * FROM dept -- table no longer exists


DROP TABLE emp


















